import flet as ft
import speech_recognition as sr
import random
import pyaudio  # Importation de pyaudio
import numpy as np
import asyncio
import unidecode
from difflib import SequenceMatcher

# Listes des éléments à lire
voyelles_listes = [["a", "i"], ["a", "i", "e"], ["a", "i", "e", "o", "u"]]
consonnes_listes = [["b", "d"], ["b", "d", "g"], ["b", "d", "g", "p"]]
syllabes_listes = [["ba", "da"], ["ba", "da", "ga"], ["ba", "da", "ga", "pa"]]
mots_listes = [["papa", "maman"], ["bébé", "jouer"], ["papillon", "camion"]]

# Seuil minimum de volume pour filtrer le bruit
VOLUME_THRESHOLD = 100
SIMILARITY_THRESHOLD = 0.5  # Tolérance de similarité

# Fonction de normalisation
def normalize_text(text):
    return unidecode.unidecode(text.lower().strip())

# Comparer les réponses par similarité
def is_similar(expected_text, recognized_text):
    normalized_expected = normalize_text(expected_text)
    normalized_recognized = normalize_text(recognized_text)
    similarity = SequenceMatcher(None, normalized_expected, normalized_recognized).ratio()
    return similarity >= SIMILARITY_THRESHOLD

async def recognize_speech(expected_text):
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("Préparation à l'écoute...")
        recognizer.adjust_for_ambient_noise(source, duration=1.0)
        try:
            print("En attente de l'audio...")
            audio_data = recognizer.listen(source, timeout=10)
            print("Audio reçu, traitement...")
            recognized_text = recognizer.recognize_google(audio_data, language="fr-FR")
            print(f"Reconnu : {recognized_text}")
            is_correct = is_similar(expected_text, recognized_text)
            return is_correct, recognized_text
        except sr.UnknownValueError:
            print("Audio non compris.")
            return False, "Audio non compris."
        except sr.RequestError as e:
            print(f"Erreur de connexion : {e}")
            return False, "Erreur de connexion au service de reconnaissance."
        except Exception as e:
            print(f"Erreur dans recognize_speech : {e}")
            return False, "Erreur inconnue."

async def main(page: ft.Page):
    page.title = "Application de Lecture"
    page.window.width = 390
    page.window.height = 740
    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER
    page.vertical_alignment = ft.MainAxisAlignment.CENTER
    page.theme_mode = ft.ThemeMode.LIGHT
    page.bgcolor = "#F0F8FF"

    current_level = 0
    current_item = None
    recording = False

    volume_label = ft.Text(value="Volume : 0", size=18, color="#333333")
    microphone_status = ft.Text(value="Microphone désactivé", size=18, color="#FF5733")
    recognized_text_field = ft.TextField(label="Texte reconnu", read_only=True)

    def update_volume():
        try:
            p = pyaudio.PyAudio()
            stream = p.open(format=pyaudio.paInt16, channels=1, rate=44100, input=True, frames_per_buffer=1024)

            while recording:
                data = np.frombuffer(stream.read(1024, exception_on_overflow=False), dtype=np.int16)
                volume = int(np.mean(np.abs(data)))
                volume_label.value = f"Volume : {volume}" if volume > VOLUME_THRESHOLD else "Volume : 0"
                page.update()

            stream.stop_stream()
            stream.close()
            p.terminate()
        except Exception as e:
            print(f"Erreur dans update_volume : {e}")

    def show_main_menu(e=None):
        page.clean()
        page.add(
            ft.Text(value="Bienvenue dans l'application de lecture", size=20, color="#006400"),
            ft.ElevatedButton("Commencer", on_click=start_lesson, width=200, bgcolor="#4CAF50", color="white"),
            ft.ElevatedButton("Aide", on_click=show_help, width=200, bgcolor="#4CAF50", color="white"),
            ft.ElevatedButton("Quitter", on_click=exit_app, width=200, bgcolor="#4CAF50", color="white"),
        )

    def show_help(e=None):
        page.clean()
        help_text = ft.Text(
            "Lisez à haute voix la lettre, syllabe ou le mot affiché.\n"
            "Si la reconnaissance est correcte, vous passez à l'élément suivant.\n"
            "Bonne chance !",
            color="#333333"
        )
        back_button = ft.ElevatedButton("Retour", on_click=show_main_menu, width=200, bgcolor="#4CAF50", color="white")
        page.add(help_text, back_button)

    def start_lesson(e=None):
        nonlocal current_level
        current_level = 0
        show_next_item()

    def show_next_item():
        nonlocal current_item
        page.clean()

        if current_level < len(voyelles_listes):
            items_list = voyelles_listes[current_level]
        elif current_level < len(voyelles_listes) + len(consonnes_listes):
            items_list = consonnes_listes[current_level - len(voyelles_listes)]
        elif current_level < len(voyelles_listes) + len(consonnes_listes) + len(syllabes_listes):
            items_list = syllabes_listes[current_level - len(voyelles_listes) - len(consonnes_listes)]
        else:
            items_list = mots_listes[current_level - len(voyelles_listes) - len(consonnes_listes) - len(syllabes_listes)]

        current_item = random.choice(items_list)
        display_text = ft.Text(value=f"Lisez : {current_item}", size=24, color="#006400")
        page.add(display_text, microphone_status, volume_label, recognized_text_field)

        record_button = ft.ElevatedButton("Lancer la reconnaissance", on_click=start_recording, width=200, bgcolor="#4CAF50", color="white")
        page.add(record_button)

    async def start_recording(e=None):
        nonlocal recording
        recording = True
        microphone_status.value = "Microphone activé"
        page.update()

        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, update_volume)

        try:
            print("Démarrage de la reconnaissance vocale...")
            result, recognized_text = await recognize_speech(current_item)
        except Exception as e:
            print(f"Erreur lors de la reconnaissance : {e}")
            recognized_text = "Erreur de reconnaissance"
            result = False

        recording = False
        recognized_text_field.value = recognized_text
        page.update()

        feedback_text = ft.Text(value="", size=18)
        if result:
            feedback_text.value = "Bien joué ! Réponse correcte."
            feedback_text.color = "#4CAF50"
            await next_level()
        else:
            feedback_text.value = f"Incorrect. Vous avez dit : {recognized_text}"
            feedback_text.color = "#FF5733"
            retry_button = ft.ElevatedButton("Réessayer", on_click=show_next_item, width=200, bgcolor="#4CAF50", color="white")
            page.add(feedback_text, retry_button)

        microphone_status.value = "Microphone désactivé"
        page.add(feedback_text)
        page.update()

    async def next_level():
        nonlocal current_level
        current_level += 1
        if current_level >= len(voyelles_listes) + len(consonnes_listes) + len(syllabes_listes) + len(mots_listes):
            show_main_menu()
        else:
            show_next_item()
    

    def exit_app(e):
        page.window.close()

    show_main_menu()

ft.app(target=main)
